{"curl-cheatsheet":{"title":"cURL cheatsheet","links":[],"tags":["curl","networking","term"],"content":"cURL cheatsheet\nUse a custom loopback interface (e.g. 127.1.2.3):\ncurl --interface 127.1.2.3 -v http://127.57.57.57:8057/\n\nIndex of helpful links\nEverything curl"},"docker":{"title":"Docker basics","links":[],"tags":["Docker","Dockerfile","containers","term","Go"],"content":"Docker\nDocker Engine\nDocker Build\nBuild images from Dockerfiles. In terms of command line toys, there’s docker build and docker buildx build which is like build on rails.\nDocker Buildx though is the client interface for building &amp; managing images, whereas Docker BuildKit is the server that does the heavy lifting including execution.\nBuilx’s build request to BuildKit includes the Dockerfile, build args and export and/or caching opts.\nExample Dockerfile\nFrom github.com/cloudnativedevops/demo.git.\nAnyways, here’s a very plain and simple Go HTTP server that runs on 127.0.0.1:8888:\npackage main\n \nimport (\n\t&quot;fmt&quot;\n\t&quot;log&quot;\n\t&quot;net/http&quot;\n)\n \nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintln(w, &quot;Hello, 世界&quot;)\n}\n \nfunc main() {\n\thttp.HandleFunc(&quot;/&quot;, handler)\n\tfmt.Println(&quot;Running demo app. Press Ctrl+C to exit...&quot;)\n\tlog.Fatal(http.ListenAndServe(&quot;:8888&quot;, nil))\n}\nNow here’s the Dockerfile\nFROM golang:1.17-alpine AS build\n \nWORKDIR /src/\nCOPY main.go go.* /src/\nRUN CGO_ENABLED=0 go build -o /bin/demo\n \nFROM scratch\nCOPY --from=build /bin/demo /bin/demo\nENTRYPOINT [&quot;/bin/demo&quot;]\nThen you run one of those1 to build and run at 127.0.0.1:9999:\ndocker image build -t myhello .\ndocker container run -p 9999:8888 myhello\n\n\n                  \n                  Caution \n                  \n                \n\nThe port syntax for docker run is host:container, so to access the container and receive the pretty “Hello, 世界” you refer to your host’s address with the first port you provided.\ncurl -v 127.0.0.1:9999\n\n\nInspect your image &amp; container (prints a JSON to stdout):\ndocker image inspect myhello\ndocker inspect myhello\ndocker container inspect c7112281a566\ndocker inspect c7112281a566\nAlso check if it’s running:\ndocker ps\ndocker container ls\n\n\n                  \n                  Container names \n                  \n                \n\nWhen you build an image, by default it just gets a hexadecimal ID, which you can use to refer to it later (for example, to run it). These IDs aren’t particularly memorable or easy to type, so Docker allows you to give the image a human-readable name, using the -t switch to docker image build. In the previous example you named the image myhello, so you should be able to use that name to run the image now.\n(Credit: writers of book from parent chapter’s repository)\n\n\nDocker Compose\nDocker, but on rails (featuring YAML from Dante May Cry).\nFootnotes\n\n\nOf course, appending sudo to both commands in the case I’m still a silly GoobSec shellhead that doesn’t wanna create a Docker group. ↩\n\n\n"},"dockerfiles":{"title":"Dockerfile structure","links":["docker"],"tags":["Dockerfile","Docker","containers","term"],"content":"Dockerfiles\nFor little extras, also read up Docker basics"},"github":{"title":"GitHub","links":[],"tags":["GitHub","Git","repositories"],"content":"GitHub CLI reference\nGitHub web\n\n\n                  \n                  Remote repo editing \n                  \n                \n\nOpen a repository in browser, then click on a file and press the &lt;/&gt; key to open the github.dev VS Code browser editor!\n\n"},"index":{"title":"Milky Quartz on the catnet","links":[],"tags":[],"content":"Welcome to milky-quartz.netcatcat.net ‼️\nMilky Quartz! On the cat net catnet, on the net!\nThis subdomain is a big garden for all my notes surroundings topics such as:\n\nIT, CS, SWE and computing in general.\nProgramming.\nSystem operation and administration.\nDevOps!\nDevSecOps.\nDev…SomethingOps?\nSite Reliability Engineering\nSecurity\nmoar software mlemgineering…\nconputer\nWhatever floats my fancy and is vaguely related to the machine colloquially known as the “conputer”.\n"},"unix-permissions":{"title":"Unix permissions","links":[],"tags":["unix","linux","permissions","chmod","term"],"content":"Unix permissions with chmod\n\nUseful examples:\nMake it executable:\nchmod +x ./run.sh\nRoot only file access:\nchmod 000 ./.creds\nRead-only exclusively for file owner:\nchmod 400 ./special-toy"},"vim-cheatsheet":{"title":"Vim cheatsheet","links":[],"tags":["vim","neovim","term"],"content":"Vi/Vim/Neovim(/Nano) Cheatsheet\nEmergency FAQ zone:\nQ :: “Oh man aw mane, we  are in som troble”\nA :: &lt;ESC&gt;+qa!+&lt;ENTER&gt;\nQ :: “Aaaa, why cannot I autocomplete file selections in my nooby Neovim setup!?”\nA :: &lt;CTRL&gt;+&lt;y&gt;\nGeneral cheatsheet (Vi family)\nGlobal substitution :: &lt;ESC&gt;+:%s/findand/replacewith1\nYank/etc into clipboard :: &lt;SHIFT&gt;+&lt;&#039;&gt;+&lt;=&gt;+&lt;y&gt; / &lt;&quot;&gt;+&lt;=&gt;+&lt;y&gt;\nPaste/etc from clipboard :: &lt;SHIFT&gt;+&lt;&#039;&gt;+&lt;=&gt;+&lt;p&gt; / &lt;&quot;&gt;+&lt;=&gt;+&lt;p&gt;\nDelete inside two HTML/XML tags :: dit, &lt;d&gt;+&lt;i&gt;+&lt;t&gt;\ne.g.: &lt;p id=&quot;catnet&quot;&gt;purge me&lt;/p&gt; → &lt;p id=&quot;catnet&quot;&gt;&lt;/p&gt;\nFootnotes\n\n\nAppend /g if global substitution doesn’t work. ↩\n\n\n"}}